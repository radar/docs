# Using Build Artifacts

Buildkite can store and retrieve output artifacts from builds.
In this guide, you'll learn what artifacts are, what they're used for, and how to upload and download them.

An artifact is a file with metadata uploaded by Buildkite to a storage service during a build.
Artifacts include file contents and metadata, such as its original file path, an integrity verification hash, and details of the build that uploaded it.

You can use artifacts to:

- Pass files from one pipeline step to another.
  For example, you can build a binary in one step, then download and run that binary in a later step.
- Store final assets produced by a pipeline, such as logs, reports, archives, and images.
  For example, you can build a static site, store the result as an archive, and fetch it later for deployment.

You can choose to keep artifacts in a Buildkite-managed storage service or a third-party cloud storage service.

There are several methods you can use to upload and download artifacts, summarized in the table:

<table>
  <thead>
    <tr>
      <th></th>
      <th>Upload</th>
      <th>Download</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th scope="row">Command step</th>
      <td>Yes</td>
      <td>No</td>
    </tr>
    <tr>
      <th scope="row">Buildkite Agent</th>
      <td>Yes</td>
      <td>Yes</td>
    </tr>
    <tr>
      <th scope="row">REST API</th>
      <td>No</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

{:toc}

## Uploading artifacts

You can upload artifacts using a pipeline step or by running the `buildkite-agent artifact upload` command.

<!-- TODO: What's the difference between using the steps versus the script? Why would I choose one or the other? -->

## Use a command step to upload artifacts
<!-- TODO: (remove comment, after consideration) To make the TOC useful, these are flattened, when they probably ought to be nested. It's not ideal. -->

Set the `artifact_paths` attribute of [a command step](/docs/pipelines/command-step) to upload artifacts after the command step has finished its work.
The `artifacts_path` attribute can contain an array of file paths or [glob patterns](/docs/agent/v3/cli-artifact#uploading-artifacts-artifact-upload-glob-syntax) to upload.

<!-- TODO: The original version of this page also mentions "the “Automatic Artifact Uploading” field of the Buildkite UI." This is the first time that I've considered the non-YAML pipeline config in the docs. Is this something to retain? -->

The following example shows a command step configured to upload all of the files in the `logs` and `coverage` directories and their subdirectories:

```yaml
steps:
  - label: ":hammer: Tests"
    command:
      - "npm install"
      - "tests.sh"
    artifact_paths:
      - "logs/**/*"
      - "coverage/**/*"
```
{: codeblock-file="pipeline.yml"}

## Use the Buildkite agent to upload artifacts

Within a build, run the `buildkite-agent artifact upload` command to upload artifacts from a script.
The agent's `upload` command arguments are one or more file paths and [glob patterns](/docs/agent/v3/cli-artifact#uploading-artifacts-artifact-upload-glob-syntax).

The following example uploads a `build.tar.gz` file from the `pkg` directory:

```shell
buildkite-agent artifact upload pkg/build.tar.gz
```

The `buildkite-agent artifact upload` command supports several options and environment variables.
For complete usage instructions, read the [`buildkite-agent artifact upload`](/docs/agent/v3/cli-artifact#uploading-artifacts) documentation.

## Downloading artifacts

When you upload an artifact, Buildkite records the file's contents, the complete path the file was uploaded from, and details of the build step it originated from, so you can retrieve artifacts by name, path, or build.

You can download artifacts by running the `buildkite-agent artifact download` command during a build or by making a request to the artifacts REST API.

## Use the Buildkite agent to download artifacts

Within a build, run the `buildkite-agent artifact download` command to download artifacts from a script.
The agent's `download` command arguments are a file path or [glob pattern](/docs/agent/v3/cli-artifact#uploading-artifacts-artifact-upload-glob-syntax) and a destination path.

The `buildkite-agent artifact download` command supports several options and environment variables.
For complete usage instructions, read the [`buildkite-agent artifact download`](/docs/agent/v3/cli-artifact#downloading-artifacts) documentation.

### Example: download one artifact
<!-- TODO: Find out if this is a conventional way to head a series of examples -->

The following example downloads a `pkg/build.tar.gz` artifact to the `archives` directory:

```shell
buildkite-agent artifact download pkg/build.tar.gz archives
```

### Example: download many artifacts

The agent's `download` command can download many artifacts using a glob pattern.
If needed, the agent can mirror the artifact's directory structure in the destination directory.

The following example downloads all of the files uploaded from the `logs` directory to the `local-logs` directory:

```shell
buildkite-agent artifact download 'logs/**' local-logs/
```

### Example: download an artifact from a specific step

By default, the agent downloads the most recent matching artifact, no matter which build step uploaded it.
If you want to get an artifact from a specific build step, use the `--step` option.

The following example downloads `build.zip` from the `build` step:

```shell
buildkite-agent artifact download build.zip tmp/ --step build
```

### Example: download an artifact from a triggering build

To download artifacts from the build that [triggered](/docs/pipelines/trigger-step) the current build, pass the `$BUILDKITE_TRIGGERED_FROM_BUILD_ID` [environment variable](/docs/pipelines/environment-variables) to the download command:

```shell
buildkite-agent artifact download "*.jpg" images/ --build $BUILDKITE_TRIGGERED_FROM_BUILD_ID
```

## Use the Buildkite REST API to download an artifact

If you want to download an artifact from outside the context of a running build or without the use of the Buildkite agent, then use the [artifacts REST API](/docs/apis/rest-api/artifacts) to list and download artifacts.

## Storage providers, encryption, and retention

If you're using Buildkite-managed artifact storage, then your artifacts are stored in Amazon S3.
At rest, artifacts are AES-256 encrypted with keys managed by AWS Key Management Service.
Buildkite retains artifacts for six months before deletion.

<!-- TODO: The original says "Buildkite has zero access to your source code in the pipelines and only receives and stores the log output of the builds and build artifacts in encrypted form." Seems… vague! Should we actually make any claims here about Buildkite's access to the source, artifacts content, logs? -->

<!-- TODO: The original talks about logs. Are they a specific type of artifact? Or something else? -->

Alternatively, you can use one of these self-managed storage providers:

- [Amazon S3](/docs/agent/v3/cli-artifact#using-your-private-aws-s3-bucket)
- [Google Cloud Storage](/docs/agent/v3/cli-artifact#using-your-private-google-cloud-bucket)
- [Artifactory](/docs/agent/v3/cli-artifact#using-your-artifactory-instance)

If you manage your own artifact storage, then you are responsible for encryption and retention planning.

To track the actions of users with access to your artifacts, use the [API Access Audit](https://buildkite.com/organizations/~/api-access-audit).
